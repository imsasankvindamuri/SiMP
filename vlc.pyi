from typing import Any, Callable, Optional, Union

class Event:
    type: Any  # EventType is an enum, but we use Any for simplicity

class EventType:
    MediaPlayerEndReached: Any  # Placeholder for the enum value

class Instance:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def media_player_new(self) -> "MediaPlayer": ...
    def media_new(self, mrl: str) -> "Media": ...

class Media:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def get_mrl(self) -> str: ...

class EventManager:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def event_attach(self, eventtype: Any, callback: Callable[..., None], *args: Any, **kwds: Any) -> int: ...
    def event_detach(self, eventtype: Any) -> None: ...

class MediaPlayer:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def event_manager(self) -> EventManager: ...
    def play(self) -> int: ...
    def pause(self) -> None: ...
    def stop(self) -> None: ...
    def set_media(self, media: Media) -> None: ...
    def audio_set_volume(self, volume: int) -> None: ...
    def get_length(self) -> int: ...
    def get_time(self) -> int: ...
    def set_time(self, time: int) -> None: ...
    def is_playing(self) -> bool: ...
